name: Deploy staging

# We deploy staging if the develop branch is updated, by creating a new tag, or by hand through the Github Actions (using workflow_dispatch).
# Observe that updating staging means resetting the database to a recent backup of the production database.
# This means that there's no issues with testing migrations on a very recent production DB.
on:
  # the action should run when a commit is pushed to the `develop` branch or to a new tag
  push:
    branches:
      - 'develop'
    tags:
    - '*'
  # The action should also run when someone starts it by hand.
  workflow_dispatch:
    

jobs:
  deploy:
    runs-on: ubuntu-latest
    # We fetch the secrets from the 'Deploy' environment. 
    environment: Deploy
    steps:
    - name: Update the staging environment on the server using SSH
      # We use a script that allows us to use SSH within github actions, running the script below on the server.
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.KEY }}
        port: 22
        # The script first fetches the latest git sources
        # it then resets the source folder to the commit from which the pipeline was started
        # After that it shuts down the staging site (note that it removes the volume for the database as well)
        # Then it loads a database dump
        # Finally it starts up the site again, using --build to ensure a new build is made.
        script:  |
          cd /services/staging/src
          git fetch
          git reset --hard ${{ github.sha }}
          cd ..
          echo "VERSION='${{ github.sha  }}'" > "version.env"           
          docker-compose down -v
          cp /backups/restore/latest.sql db/startup.sql
          docker-compose up -d --build
